@if (TotalPages > 0)
{
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            @{
                int SHOW_LAST_PAGE = TotalPages - 2;
                var disablePrev = !HasPreviousPage ? "disabled" : null;
                var disableNext = !HasNextPage ? "disabled" : null;
            }
            <li class="page-item @disablePrev">
                <a class="page-link" href="#" aria-label="Previous" @onclick="(() => OnClick.InvokeAsync(PageIndex - 1))">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>

            @if (TotalPages <= SHORT_PAGE)
            {
                for (int i = 1; i <= TotalPages; i++)
                {
                    _isCurrentPage = i == PageIndex ? "active" : default!;
                    int paged = i;
                    <li class="page-item @_isCurrentPage">
                        <a href="#" class="page-link" @onclick="(() => OnClick.InvokeAsync(paged))">@i</a>
                    </li>
                }
            }
            else
            {
                for (int i = 1; i <= SHOW_FIRST_PAGE; i++)
                {
                    int paged = i;
                    _isCurrentPage = i == PageIndex ? "active" : default!;
                    <li class="page-item @_isCurrentPage">
                        <a href="#" class="page-link" @onclick="(() => OnClick.InvokeAsync(paged))">@i</a>
                    </li>
                }

                <li class="page-item page-link">...</li>
                for (int i = SHOW_LAST_PAGE; i < TotalPages; i++)
                {
                    int paged = i;
                    _isCurrentPage = i == PageIndex ? "active" : default!;
                    <li class="page-item @_isCurrentPage"><a href="#" class="page-link" @onclick="(() => OnClick.InvokeAsync(paged))">@i</a></li>
                }
            }
            <li class="page-item @disableNext">
                <a class="page-link" href="#" aria-label="Next" @onclick="(() => OnClick.InvokeAsync(PageIndex + 1))">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
}

@code {
    [Parameter]
    public int PageIndex { get; set; }

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public bool HasPreviousPage { get; set; }

    [Parameter]
    public bool HasNextPage { get; set; }

    [Parameter]
    public EventCallback<int> OnClick { get; set; }

    private string _isCurrentPage = default!;
    private const int SHORT_PAGE = 6, SHOW_FIRST_PAGE = 3;
}